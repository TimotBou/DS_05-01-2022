#include "Header.h"
#include <iostream>
#include <iterator>
#include <algorithm>
using namespace std;

Exploitation::Exploitation(int id, string nomExploitant, string melExploitant, map<EspeceCultivee*, int> mapliste) {
	this->id = id
	this->nomExploitant = nomExploitant;
	this->melExploitant = melExploitant;
	this->Espece = mapliste;
}

int Exploitation::getId() const {
	return this->id;
}

string Exploitation::getNomExploitant() const
{
	return this->nomExploitant;
}

map<Parcelle*, int> Exploitation::qteParcelle()
{
	vector<EspeceCultivee*> espc;

	//Déclaration de la map
	map<Parcelle*, int> result;

	//Récupération des clés de la map qui sont des Espèces Cultivées
	for (const auto elem : this->Espece) {
		espc.push_back(elem.first);
	}

	Parcelle* par;
	int val = 0;

	for (auto espece : qteParcelle) {

		par = espece->getParcelle();

		if (result.find(par) != result.end()) {
			val += this->Espece[espece];
			result[par] = val;
		}
		else {
			val = this->Espece[espece];
			result.insert(make_pair(par, val));
		}

	}

	return result;
}

void Exploitation::setEspeceCultivee(EspeceCultivee* E, int val)
{
	this->Espece.insert(make_pair(j, val));

}